package compenny4860.github.tensorflowliteexample;

import android.app.Activity;
import android.graphics.Bitmap;
import android.util.Log;
import java.io.IOException;
import org.tensorflow.contrib.android.TensorFlowInferenceInterface;

public class StyleTransfer {

    private TensorFlowInferenceInterface encoderInterface;
    private TensorFlowInferenceInterface decoderInterface;

    private static final String MODEL_FILE = "encoder_opt.pb";

    private static final String INPUT_NODE = "input";
    private static final String STYLE_NODE = "style_num";
    private static final String OUTPUT_NODE = "output/Relu";
    public static final int NUM_STYLES = 26;

    //    private static final int desiredSize = 256;
//
//    private final float[] styleVals = new float[NUM_STYLES];
    private int[] intValues;
    private float[] floatValues;

    private static final String TAG = "StyleTransferDemo";

    StyleTransfer(Activity activity) throws IOException {
        Log.d(TAG, "Constructor");
        encoderInterface = new TensorFlowInferenceInterface(activity.getAssets(), MODEL_FILE);
        decoderInterface = new TensorFlowInferenceInterface(activity.getAssets(), "decoder_opt.pb");
        setSize(256);
        testPorting();
        Log.d(TAG, "Test Porting is done");
    }

    private void testPorting()
    {
        double[] doubleValues = {118.828125, 173.82812, 228.79688, 125.59375, 177.90625, 227.5625, 133.4375, 184.0625, 234.75, 117.3125, 176.3125, 232.3125, 142.39062, 189.8125, 234.26562, 135.75, 187.75, 234.75, 146.48438, 191.48438, 233.48438, 128.92188, 184.40625, 233.57812, 132.40625, 185.65625, 234.90625, 130.3125, 184.3125, 231.3125, 139.51562, 187.51562, 233.51562, 123.171875, 178.51562, 232.84375, 121.78125, 179.14062, 232.07812, 119.765625, 176.51562, 233.26562, 116.03125, 172.03125, 229.03125, 121.484375, 173.23438, 229.73438, 140.10938, 189.0625, 232.20312, 121.1875, 181.0625, 230.9375, 123.703125, 183.76562, 233.57812, 120.734375, 180.46875, 235.04688, 127.0625, 184.96875, 235.01562, 137.89062, 189.89062, 236.89062, 152.35938, 195.35938, 237.35938, 129.04688, 184.90625, 235.92188, 159.125, 197.1875, 236.28125, 161.9375, 198.9375, 240.9375, 188.07812, 214.07812, 241.07812, 138.73438, 189.76562, 236.25, 126.4375, 183.9375, 233.1875, 127.28125, 183.28125, 232.28125, 149.625, 191.625, 232.125, 163.32812, 198.0, 235.71875, 150.23438, 191.25, 230.92188, 127.0, 184.25, 229.5, 125.890625, 185.89062, 237.01562, 138.57812, 191.85938, 237.125, 148.0, 195.625, 238.71875, 138.57812, 190.57812, 237.57812, 143.25, 194.25, 237.25, 157.15625, 198.96875, 237.96875, 163.125, 202.125, 241.125, 196.75, 219.625, 243.0625, 196.28125, 219.90625, 241.70312, 180.28125, 208.54688, 239.92188, 171.76562, 205.20312, 239.35938, 164.4375, 202.07812, 240.76562, 185.65625, 212.60938, 240.4375, 191.375, 214.25, 239.125, 149.71875, 192.09375, 230.28125, 146.79688, 194.17188, 235.98438, 142.53125, 193.90625, 238.71875, 145.95312, 196.95312, 240.23438, 138.375, 195.65625, 240.51562, 144.59375, 197.59375, 241.59375, 143.0625, 196.20312, 240.20312, 141.0625, 195.0625, 241.0625, 141.57812, 196.1875, 241.89062, 186.79688, 218.17188, 247.54688, 222.625, 238.25, 250.875, 228.67188, 240.92188, 250.26562, 192.79688, 218.89062, 241.9375, 189.25, 215.25, 240.25, 179.92188, 209.32812, 239.625, 206.20312, 227.20312, 246.57812, 127.609375, 186.60938, 230.60938, 131.04688, 192.04688, 236.04688, 142.46875, 200.04688, 240.1875, 146.0625, 200.5625, 241.8125, 145.42188, 199.21875, 244.71875, 144.625, 199.1875, 245.0, 153.875, 202.875, 243.875, 142.51562, 198.76562, 244.01562, 148.70312, 194.54688, 232.34375, 146.20312, 199.20312, 243.20312, 198.21875, 226.07812, 247.28125, 208.4375, 229.4375, 246.8125, 204.42188, 225.8125, 247.09375, 170.4375, 206.4375, 240.84375, 214.76562, 232.71875, 246.8125, 236.54688, 243.54688, 249.54688, 136.78125, 191.78125, 232.78125, 135.54688, 193.54688, 233.54688, 143.04688, 201.04688, 241.04688, 142.0, 201.0, 243.0, 143.5, 200.5, 243.5, 144.4375, 202.5625, 245.0, 155.0, 207.0, 247.0, 160.54688, 209.20312, 245.75, 156.82812, 181.25, 205.6875, 223.3125, 241.20312, 251.82812, 248.10938, 252.10938, 253.10938, 223.4375, 238.3125, 251.6875, 211.96875, 230.01562, 247.29688, 238.32812, 245.32812, 253.32812, 242.0, 247.0, 251.0, 241.3125, 245.23438, 249.14062, 148.875, 198.75, 235.21875, 146.34375, 198.34375, 235.34375, 177.67188, 212.42188, 240.17188, 153.375, 206.875, 245.125, 150.07812, 205.07812, 246.07812, 151.04688, 206.04688, 247.04688, 153.29688, 208.29688, 249.29688, 151.5, 206.5, 247.0, 34.3125, 50.3125, 65.3125, 158.21875, 211.20312, 245.25, 221.78125, 238.82812, 246.92188, 215.10938, 234.0625, 248.0625, 236.59375, 244.0625, 249.82812, 252.1875, 253.1875, 248.1875, 239.9375, 244.9375, 247.9375, 239.3125, 244.07812, 247.07812, 198.0625, 220.75, 236.125, 176.82812, 211.14062, 235.20312, 153.76562, 206.76562, 238.07812, 157.40625, 210.40625, 243.03125, 158.17188, 211.17188, 245.17188, 156.85938, 211.48438, 247.17188, 158.25, 212.0, 247.5, 163.67188, 214.20312, 247.59375, 24.453125, 40.953125, 54.671875, 180.59375, 220.625, 248.71875, 220.79688, 238.60938, 247.14062, 239.15625, 244.90625, 248.17188, 240.82812, 245.82812, 248.82812, 236.3125, 243.375, 246.375, 237.20312, 241.51562, 243.14062, 227.23438, 236.23438, 243.85938, 161.07812, 206.07812, 235.07812, 161.0, 208.0, 236.625, 167.3125, 211.3125, 238.65625, 172.98438, 214.92188, 243.23438, 166.48438, 215.48438, 246.51562, 165.48438, 215.85938, 245.79688, 173.5625, 215.5625, 240.15625, 75.390625, 84.75, 93.828125, 33.234375, 49.234375, 65.15625, 195.40625, 227.3125, 246.0, 235.0625, 243.375, 247.0, 38.84375, 48.78125, 64.96875, 239.0, 245.0, 245.0, 236.6875, 241.6875, 244.6875, 159.65625, 76.140625, 75.921875, 36.109375, 25.484375, 36.171875, 167.29688, 212.29688, 235.29688, 168.21875, 213.21875, 236.21875, 170.0, 215.0, 234.0, 173.54688, 217.79688, 240.54688, 174.375, 222.375, 242.375, 183.40625, 223.79688, 243.48438, 61.1875, 84.734375, 108.359375, 85.015625, 93.53125, 100.234375, 30.453125, 38.359375, 49.875, 229.375, 240.75, 246.79688, 128.9375, 160.70312, 180.82812, 41.96875, 49.21875, 64.46875, 78.90625, 86.6875, 96.953125, 225.0, 234.0, 239.0, 120.203125, 45.328125, 46.078125, 26.8125, 20.859375, 30.875, 180.1875, 215.85938, 229.96875, 189.95312, 218.95312, 226.95312, 192.39062, 221.54688, 231.0, 127.21875, 114.21875, 103.46875, 192.8125, 225.6875, 238.25, 90.78125, 75.796875, 74.9375, 63.921875, 84.5, 103.640625, 70.59375, 82.84375, 91.234375, 178.34375, 165.04688, 150.35938, 226.3125, 238.0625, 240.3125, 67.53125, 80.609375, 95.625, 151.34375, 145.25, 139.28125, 59.84375, 69.125, 75.703125, 44.21875, 51.0, 61.765625, 148.67188, 63.03125, 60.71875, 36.0625, 23.0625, 32.8125, 43.375, 39.09375, 40.234375, 71.765625, 66.0625, 63.671875, 119.34375, 102.84375, 93.96875, 14.859375, 17.90625, 26.90625, 61.84375, 66.375, 67.875, 66.203125, 75.296875, 80.25, 62.421875, 73.921875, 85.921875, 80.578125, 87.546875, 87.765625, 168.23438, 158.6875, 145.03125, 34.984375, 44.984375, 54.984375, 8.84375, 20.84375, 32.84375, 142.5, 135.9375, 127.84375, 43.0625, 50.5625, 58.8125, 154.0, 146.17188, 134.6875, 91.296875, 45.125, 44.4375, 59.375, 58.625, 56.4375, 19.890625, 19.1875, 25.546875, 43.65625, 41.09375, 42.65625, 93.21875, 69.40625, 60.84375, 6.59375, 11.15625, 21.59375, 22.859375, 21.859375, 29.859375, 21.0625, 24.609375, 29.125, 52.359375, 51.03125, 56.6875, 38.390625, 50.921875, 58.890625, 127.046875, 108.65625, 94.921875, 39.28125, 43.34375, 46.96875, 56.21875, 60.46875, 64.46875, 98.28125, 84.703125, 75.6875, 126.171875, 122.375, 112.15625, 125.609375, 110.546875, 98.875, 53.328125, 32.71875, 34.796875, 113.265625, 96.15625, 83.4375, 77.1875, 97.96875, 103.078125, 76.65625, 76.90625, 75.65625, 80.1875, 72.109375, 57.484375, 5.140625, 12.140625, 19.078125, 21.296875, 23.796875, 23.796875, 76.09375, 72.796875, 49.6875, 48.578125, 49.828125, 56.390625, 31.703125, 37.390625, 45.828125, 125.796875, 104.625, 79.734375, 219.90625, 196.34375, 167.03125, 67.3125, 70.140625, 62.375, 93.0625, 83.796875, 64.34375, 52.515625, 50.875, 41.515625, 87.984375, 84.984375, 69.984375, 48.75, 51.140625, 42.65625, 103.625, 91.046875, 82.328125, 67.953125, 86.546875, 96.34375, 28.09375, 30.0, 16.34375, 63.1875, 61.1875, 46.1875, 66.421875, 63.453125, 46.3125, 53.8125, 52.390625, 47.109375, 65.25, 68.546875, 47.5, 48.625, 49.765625, 32.953125, 48.8125, 49.8125, 34.71875, 73.53125, 70.890625, 51.453125, 33.65625, 35.78125, 21.953125, 27.0625, 29.1875, 16.125, 28.796875, 26.5, 20.640625, 70.71875, 59.09375, 45.640625, 42.53125, 39.59375, 23.1875, 66.28125, 61.1875, 41.28125, 70.8125, 65.0, 49.34375, 77.890625, 76.109375, 68.0, 164.23438, 156.17188, 141.48438, 125.796875, 111.171875, 98.578125, 108.28125, 146.85938, 152.35938, 102.25, 150.21875, 159.46875, 102.53125, 153.03125, 159.75, 99.609375, 151.9375, 159.29688, 97.53125, 146.17188, 149.90625, 92.125, 145.25, 150.35938, 99.59375, 150.03125, 159.46875, 100.28125, 152.20312, 160.23438, 97.359375, 149.60938, 155.04688, 94.71875, 148.5, 155.5, 99.140625, 148.20312, 157.92188, 95.078125, 141.51562, 150.73438, 92.328125, 140.45312, 150.82812,};
        float[] inputValues = new float[doubleValues.length];
        float[] featValues = new float[2*2*512];

        for (int i=0; i < doubleValues.length; i++)
        {
            inputValues[i] = (float) doubleValues[i];
        }
        Log.d(TAG, inputValues.length + ", " + doubleValues.length);

        encoderInterface.feed(INPUT_NODE, inputValues,
                1, 16, 16, 3);
        encoderInterface.run(new String[] {OUTPUT_NODE}, false);
        encoderInterface.fetch(OUTPUT_NODE, featValues);

        String msg = "";
        for (int i=0; i < featValues.length; i++)
        {
            msg = msg + featValues[i] + " ,";
        }
        Log.d(TAG, msg);

        decoderInterface.feed("input_c", featValues,
                1, 2, 2, 512);
        decoderInterface.feed("input_s", featValues,
                1, 2, 2, 512);
        decoderInterface.run(new String[] {"output/mul"}, false);
        decoderInterface.fetch("output/mul", inputValues);

        msg = "";
        for (int i=0; i < inputValues.length; i++)
        {
            msg = msg + inputValues[i] + " ,";
        }
        Log.d(TAG, msg);
    }

    public void setSize(int desiredSize) {
        //Todo: desiredSize가 기존 value와 다를 때만 array를 새로 생성
        floatValues = new float[desiredSize * desiredSize * 3];
        intValues = new int[desiredSize * desiredSize];
    }

    private void getFloatValues(final Bitmap bitmap) {
        bitmap.getPixels(intValues, 0, bitmap.getWidth(), 0, 0, bitmap.getWidth(), bitmap.getHeight());

        for (int i = 0; i < intValues.length; ++i) {
            final int val = intValues[i];
            floatValues[i * 3] = ((val >> 16) & 0xFF) / 255.0f;
            floatValues[i * 3 + 1] = ((val >> 8) & 0xFF) / 255.0f;
            floatValues[i * 3 + 2] = (val & 0xFF) / 255.0f;
        }
    }

    private void getFeatures(final Bitmap bitmap, float featureValues[]) {
        encoderInterface.feed(INPUT_NODE, floatValues,
                1, bitmap.getWidth(), bitmap.getHeight(), 3);
        encoderInterface.run(new String[] {OUTPUT_NODE}, false);
        encoderInterface.fetch(OUTPUT_NODE, featureValues);
    }

    public void run(final Bitmap contentBitmap, final Bitmap styleBitmap) {
        Log.d(TAG, "style running");

        float[] contentFeatureValues = new float[contentBitmap.getWidth()/8 * contentBitmap.getHeight()/8 * 512];
        float[] styleFeatureValues = new float[contentBitmap.getWidth()/8 * contentBitmap.getHeight()/8 * 512];
        float[] stylized_img = new float[contentBitmap.getWidth() * contentBitmap.getHeight() * 3];

        // 1. Get contentFeatureValues
        getFloatValues(contentBitmap);
        getFeatures(contentBitmap, contentFeatureValues);

        // 2. Get styleFeatureValues
        getFloatValues(styleBitmap);
        getFeatures(styleBitmap, styleFeatureValues);
        Log.d(TAG, "encoder running is done");

        Log.d(TAG, "content size: " + contentBitmap.getWidth() + ", " + contentBitmap.getHeight() + ", " + contentFeatureValues.length);
        Log.d(TAG, "style size: " + styleBitmap.getWidth() + ", " + styleBitmap.getHeight() + ", " + styleFeatureValues.length);

        decoderInterface.feed("input_c", contentFeatureValues,
                1, contentBitmap.getWidth()/8, contentBitmap.getHeight()/8, 512);
        decoderInterface.feed("input_s", styleFeatureValues,
                1, styleBitmap.getWidth()/8, styleBitmap.getHeight()/8, 512);
        decoderInterface.run(new String[] {"output/mul"}, false);
        Log.d(TAG, "style size: " + stylized_img.length);
        Log.d(TAG, "decoder running.......");
        decoderInterface.fetch("output/mul", stylized_img);
        Log.d(TAG, "decoder running is done");

        for (int i = 0; i < intValues.length; ++i) {
            intValues[i] =
                    0xFF000000
                            | (((int) (stylized_img[i * 3] * 255)) << 16)
                            | (((int) (stylized_img[i * 3 + 1] * 255)) << 8)
                            | ((int) (stylized_img[i * 3 + 2] * 255));
        }
        contentBitmap.setPixels(intValues, 0, contentBitmap.getWidth(), 0, 0, contentBitmap.getWidth(), contentBitmap.getHeight());
        Log.d(TAG, "set bitmap");

    }

}

